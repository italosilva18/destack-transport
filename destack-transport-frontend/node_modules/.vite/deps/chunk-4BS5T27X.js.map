{
  "version": 3,
  "sources": ["../../vuetify/src/components/VFileInput/VFileInput.tsx"],
  "sourcesContent": ["// Styles\nimport './VFileInput.sass'\n\n// Components\nimport { VChip } from '@/components/VChip'\nimport { VCounter } from '@/components/VCounter'\nimport { VField } from '@/components/VField'\nimport { makeVFieldProps } from '@/components/VField/VField'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\n\n// Composables\nimport { useFocus } from '@/composables/focus'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, nextTick, ref, shallowRef, toRef, watch } from 'vue'\nimport {\n  callEvent,\n  filterInputAttrs,\n  genericComponent,\n  humanReadableFileSize,\n  propsFactory,\n  useRender,\n  wrapInArray,\n} from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nexport type VFileInputSlots = VInputSlots & VFieldSlots & {\n  counter: never\n  selection: {\n    fileNames: string[]\n    totalBytes: number\n    totalBytesReadable: string\n  }\n}\n\nexport const makeVFileInputProps = propsFactory({\n  chips: Boolean,\n  counter: Boolean,\n  counterSizeString: {\n    type: String,\n    default: '$vuetify.fileInput.counterSize',\n  },\n  counterString: {\n    type: String,\n    default: '$vuetify.fileInput.counter',\n  },\n  hideInput: Boolean,\n  multiple: Boolean,\n  showSize: {\n    type: [Boolean, Number, String] as PropType<boolean | 1000 | 1024>,\n    default: false,\n    validator: (v: boolean | number) => {\n      return (\n        typeof v === 'boolean' ||\n        [1000, 1024].includes(Number(v))\n      )\n    },\n  },\n\n  ...makeVInputProps({ prependIcon: '$file' }),\n\n  modelValue: {\n    type: [Array, Object] as PropType<File[] | File | null>,\n    default: (props: any) => props.multiple ? [] : null,\n    validator: (val: any) => {\n      return wrapInArray(val).every(v => v != null && typeof v === 'object')\n    },\n  },\n\n  ...makeVFieldProps({ clearable: true }),\n}, 'VFileInput')\n\nexport const VFileInput = genericComponent<VFileInputSlots>()({\n  name: 'VFileInput',\n\n  inheritAttrs: false,\n\n  props: makeVFileInputProps(),\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'mousedown:control': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (files: File | File[]) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { t } = useLocale()\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      props.modelValue,\n      val => wrapInArray(val),\n      val => (!props.multiple && Array.isArray(val)) ? val[0] : val,\n    )\n    const { isFocused, focus, blur } = useFocus(props)\n    const base = computed(() => typeof props.showSize !== 'boolean' ? props.showSize : undefined)\n    const totalBytes = computed(() => (model.value ?? []).reduce((bytes, { size = 0 }) => bytes + size, 0))\n    const totalBytesReadable = computed(() => humanReadableFileSize(totalBytes.value, base.value))\n\n    const fileNames = computed(() => (model.value ?? []).map(file => {\n      const { name = '', size = 0 } = file\n\n      return !props.showSize\n        ? name\n        : `${name} (${humanReadableFileSize(size, base.value)})`\n    }))\n\n    const counterValue = computed(() => {\n      const fileCount = model.value?.length ?? 0\n      if (props.showSize) return t(props.counterSizeString, fileCount, totalBytesReadable.value)\n      else return t(props.counterString, fileCount)\n    })\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const inputRef = ref<HTMLInputElement>()\n    const isActive = toRef(() => isFocused.value || props.active)\n    const isPlainOrUnderlined = computed(() => ['plain', 'underlined'].includes(props.variant))\n    const isDragging = shallowRef(false)\n\n    function onFocus () {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus()\n      }\n\n      if (!isFocused.value) focus()\n    }\n    function onClickPrepend (e: MouseEvent) {\n      inputRef.value?.click()\n    }\n    function onControlMousedown (e: MouseEvent) {\n      emit('mousedown:control', e)\n    }\n    function onControlClick (e: MouseEvent) {\n      inputRef.value?.click()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = []\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onDragover (e: DragEvent) {\n      e.preventDefault()\n      e.stopImmediatePropagation()\n      isDragging.value = true\n    }\n    function onDragleave (e: DragEvent) {\n      e.preventDefault()\n      isDragging.value = false\n    }\n    function onDrop (e: DragEvent) {\n      e.preventDefault()\n      e.stopImmediatePropagation()\n      isDragging.value = false\n\n      if (!e.dataTransfer?.files?.length || !inputRef.value) return\n\n      const dataTransfer = new DataTransfer()\n\n      for (const file of e.dataTransfer.files) {\n        dataTransfer.items.add(file)\n      }\n\n      inputRef.value.files = dataTransfer.files\n      inputRef.value.dispatchEvent(new Event('change', { bubbles: true }))\n    }\n\n    watch(model, newValue => {\n      const hasModelReset = !Array.isArray(newValue) || !newValue.length\n\n      if (hasModelReset && inputRef.value) {\n        inputRef.value.value = ''\n      }\n    })\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const { modelValue: _, ...inputProps } = VInput.filterProps(props)\n      const fieldProps = VField.filterProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          modelValue={ props.multiple ? model.value : model.value[0] }\n          class={[\n            'v-file-input',\n            {\n              'v-file-input--chips': !!props.chips,\n              'v-file-input--dragging': isDragging.value,\n              'v-file-input--hide': props.hideInput,\n              'v-input--plain-underlined': isPlainOrUnderlined.value,\n            },\n            props.class,\n          ]}\n          style={ props.style }\n          onClick:prepend={ onClickPrepend }\n          { ...rootAttrs }\n          { ...inputProps }\n          centerAffix={ !isPlainOrUnderlined.value }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                prepend-icon={ props.prependIcon }\n                onMousedown={ onControlMousedown }\n                onClick={ onControlClick }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                { ...fieldProps }\n                id={ id.value }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                disabled={ isDisabled.value }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n                onDragover={ onDragover }\n                onDrop={ onDrop }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => (\n                    <>\n                      <input\n                        ref={ inputRef }\n                        type=\"file\"\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        multiple={ props.multiple }\n                        name={ props.name }\n                        onClick={ e => {\n                          e.stopPropagation()\n\n                          if (isReadonly.value) e.preventDefault()\n\n                          onFocus()\n                        }}\n                        onChange={ e => {\n                          if (!e.target) return\n\n                          const target = e.target as HTMLInputElement\n                          model.value = [...target.files ?? []]\n                        }}\n                        onDragleave={ onDragleave }\n                        onFocus={ onFocus }\n                        onBlur={ blur }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n\n                      <div class={ fieldClass }>\n                        { !!model.value?.length && !props.hideInput && (\n                          slots.selection ? slots.selection({\n                            fileNames: fileNames.value,\n                            totalBytes: totalBytes.value,\n                            totalBytesReadable: totalBytesReadable.value,\n                          })\n                          : props.chips ? fileNames.value.map(text => (\n                            <VChip\n                              key={ text }\n                              size=\"small\"\n                              text={ text }\n                            />\n                          ))\n                          : fileNames.value.join(', ')\n                        )}\n                      </div>\n                    </>\n                  ),\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ !!model.value?.length }\n                      value={ counterValue.value }\n                      disabled={ props.disabled }\n                      v-slots:default={ slots.counter }\n                    />\n                  </>\n                )}\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef)\n  },\n})\n\nexport type VFileInput = InstanceType<typeof VFileInput>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA;AAyCO,IAAMA,sBAAsBC,aAAa;EAC9CC,OAAOC;EACPC,SAASD;EACTE,mBAAmB;IACjBC,MAAMC;IACNC,SAAS;EACX;EACAC,eAAe;IACbH,MAAMC;IACNC,SAAS;EACX;EACAE,WAAWP;EACXQ,UAAUR;EACVS,UAAU;IACRN,MAAM,CAACH,SAASU,QAAQN,MAAM;IAC9BC,SAAS;IACTM,WAAYC,OAAwB;AAClC,aACE,OAAOA,MAAM,aACb,CAAC,KAAM,IAAI,EAAEC,SAASH,OAAOE,CAAC,CAAC;IAEnC;EACF;EAEA,GAAGE,gBAAgB;IAAEC,aAAa;EAAQ,CAAC;EAE3CC,YAAY;IACVb,MAAM,CAACc,OAAOC,MAAM;IACpBb,SAAUc,WAAeA,MAAMX,WAAW,CAAA,IAAK;IAC/CG,WAAYS,SAAa;AACvB,aAAOC,YAAYD,GAAG,EAAEE,MAAMV,OAAKA,KAAK,QAAQ,OAAOA,MAAM,QAAQ;IACvE;EACF;EAEA,GAAGW,gBAAgB;IAAEC,WAAW;EAAK,CAAC;AACxC,GAAG,YAAY;AAER,IAAMC,aAAaC,iBAAkC,EAAE;EAC5DC,MAAM;EAENC,cAAc;EAEdT,OAAOtB,oBAAoB;EAE3BgC,OAAO;IACL,iBAAkBC,OAAkB;IACpC,qBAAsBA,OAAkB;IACxC,kBAAmBC,aAAqB;IACxC,qBAAsBC,WAAyB;EACjD;EAEAC,MAAOd,OAAKe,MAA0B;AAAA,QAAxB;MAAEC;MAAOC;MAAMC;IAAM,IAACH;AAClC,UAAM;MAAEI;IAAE,IAAIC,UAAU;AACxB,UAAMC,QAAQC,gBACZtB,OACA,cACAA,MAAMH,YACNI,SAAOC,YAAYD,GAAG,GACtBA,SAAQ,CAACD,MAAMX,YAAYS,MAAMyB,QAAQtB,GAAG,IAAKA,IAAI,CAAC,IAAIA,GAC5D;AACA,UAAM;MAAEuB;MAAWC;MAAOC;IAAK,IAAIC,SAAS3B,KAAK;AACjD,UAAM4B,OAAOC,SAAS,MAAM,OAAO7B,MAAMV,aAAa,YAAYU,MAAMV,WAAWwC,MAAS;AAC5F,UAAMC,aAAaF,SAAS,OAAOR,MAAMW,SAAS,CAAA,GAAIC,OAAO,CAACC,OAAKC,UAAA;AAAA,UAAE;QAAEC,OAAO;MAAE,IAACD;AAAA,aAAKD,QAAQE;IAAI,GAAE,CAAC,CAAC;AACtG,UAAMC,qBAAqBR,SAAS,MAAMS,sBAAsBP,WAAWC,OAAOJ,KAAKI,KAAK,CAAC;AAE7F,UAAMO,YAAYV,SAAS,OAAOR,MAAMW,SAAS,CAAA,GAAIQ,IAAIC,UAAQ;AAC/D,YAAM;QAAEjC,OAAO;QAAI4B,OAAO;MAAE,IAAIK;AAEhC,aAAO,CAACzC,MAAMV,WACVkB,OACA,GAAGA,IAAI,KAAK8B,sBAAsBF,MAAMR,KAAKI,KAAK,CAAC;IACzD,CAAC,CAAC;AAEF,UAAMU,eAAeb,SAAS,MAAM;;AAClC,YAAMc,cAAYtB,WAAMW,UAANX,mBAAauB,WAAU;AACzC,UAAI5C,MAAMV,SAAU,QAAO6B,EAAEnB,MAAMjB,mBAAmB4D,WAAWN,mBAAmBL,KAAK;UACpF,QAAOb,EAAEnB,MAAMb,eAAewD,SAAS;IAC9C,CAAC;AACD,UAAME,YAAYC,IAAY;AAC9B,UAAMC,YAAYD,IAAY;AAC9B,UAAME,WAAWF,IAAsB;AACvC,UAAMG,WAAWC,MAAM,MAAM1B,UAAUQ,SAAShC,MAAMmD,MAAM;AAC5D,UAAMC,sBAAsBvB,SAAS,MAAM,CAAC,SAAS,YAAY,EAAEnC,SAASM,MAAMqD,OAAO,CAAC;AAC1F,UAAMC,aAAaC,WAAW,KAAK;AAEnC,aAASC,UAAW;;AAClB,UAAIR,SAAShB,UAAUyB,SAASC,eAAe;AAC7CV,uBAAShB,UAATgB,mBAAgBvB;MAClB;AAEA,UAAI,CAACD,UAAUQ,MAAOP,OAAM;IAC9B;AACA,aAASkC,eAAgBhD,GAAe;;AACtCqC,qBAAShB,UAATgB,mBAAgBY;IAClB;AACA,aAASC,mBAAoBlD,GAAe;AAC1CM,WAAK,qBAAqBN,CAAC;IAC7B;AACA,aAASmD,eAAgBnD,GAAe;;AACtCqC,qBAAShB,UAATgB,mBAAgBY;AAEhB3C,WAAK,iBAAiBN,CAAC;IACzB;AACA,aAASoD,QAASpD,GAAe;AAC/BA,QAAEqD,gBAAgB;AAElBR,cAAQ;AAERS,eAAS,MAAM;AACb5C,cAAMW,QAAQ,CAAA;AAEdkC,kBAAUlE,MAAM,eAAe,GAAGW,CAAC;MACrC,CAAC;IACH;AACA,aAASwD,WAAYxD,GAAc;AACjCA,QAAEyD,eAAe;AACjBzD,QAAE0D,yBAAyB;AAC3Bf,iBAAWtB,QAAQ;IACrB;AACA,aAASsC,YAAa3D,GAAc;AAClCA,QAAEyD,eAAe;AACjBd,iBAAWtB,QAAQ;IACrB;AACA,aAASuC,OAAQ5D,GAAc;;AAC7BA,QAAEyD,eAAe;AACjBzD,QAAE0D,yBAAyB;AAC3Bf,iBAAWtB,QAAQ;AAEnB,UAAI,GAACrB,aAAE6D,iBAAF7D,mBAAgBE,UAAhBF,mBAAuBiC,WAAU,CAACI,SAAShB,MAAO;AAEvD,YAAMwC,eAAe,IAAIC,aAAa;AAEtC,iBAAWhC,QAAQ9B,EAAE6D,aAAa3D,OAAO;AACvC2D,qBAAaE,MAAMC,IAAIlC,IAAI;MAC7B;AAEAO,eAAShB,MAAMnB,QAAQ2D,aAAa3D;AACpCmC,eAAShB,MAAM4C,cAAc,IAAIC,MAAM,UAAU;QAAEC,SAAS;MAAK,CAAC,CAAC;IACrE;AAEAC,UAAM1D,OAAO2D,cAAY;AACvB,YAAMC,gBAAgB,CAACnF,MAAMyB,QAAQyD,QAAQ,KAAK,CAACA,SAASpC;AAE5D,UAAIqC,iBAAiBjC,SAAShB,OAAO;AACnCgB,iBAAShB,MAAMA,QAAQ;MACzB;IACF,CAAC;AAEDkD,cAAU,MAAM;AACd,YAAMC,aAAa,CAAC,EAAEjE,MAAMpC,WAAWkB,MAAMlB;AAC7C,YAAMsG,aAAa,CAAC,EAAED,cAAcjE,MAAMmE;AAC1C,YAAM,CAACC,WAAWC,UAAU,IAAIC,iBAAiBxE,KAAK;AACtD,YAAM;QAAEnB,YAAY4F;QAAG,GAAGC;MAAW,IAAIC,OAAOC,YAAY5F,KAAK;AACjE,YAAM6F,aAAaC,OAAOF,YAAY5F,KAAK;AAE3C,aAAA+F,YAAAJ,QAAAK,WAAA;QAAA,OAEUnD;QAAS,cACF7C,MAAMX,WAAWgC,MAAMW,QAAQX,MAAMW,MAAM,CAAC;QAAC,SACnD,CACL,gBACA;UACE,uBAAuB,CAAC,CAAChC,MAAMpB;UAC/B,0BAA0B0E,WAAWtB;UACrC,sBAAsBhC,MAAMZ;UAC5B,6BAA6BgE,oBAAoBpB;QACnD,GACAhC,MAAMiG,KAAK;QACZ,SACOjG,MAAMkG;QAAK,mBACDvC;MAAc,GAC3B2B,WACAI,YAAU;QAAA,eACD,CAACtC,oBAAoBpB;QAAK,WAC9BR,UAAUQ;MAAK,CAAA,GAAA;QAGvB,GAAGd;QACHhC,SAASiH,WAAA;AAAA,cAAC;YACRC;YACAC;YACAC;YACAC;YACAC;UACF,IAACL;AAAA,iBAAAJ,YAAAD,QAAAE,WAAA;YAAA,OAESjD;YAAS,gBACA/C,MAAMJ;YAAW,eAClBiE;YAAkB,WACtBC;YAAc,iBACRC;YAAO,wBACA/D,MAAM,sBAAsB;YAAC,uBAC9BA,MAAM,qBAAqB;UAAC,GAC7C6F,YAAU;YAAA,MACVO,GAAGpE;YAAK,UACJiB,SAASjB,SAASsE,QAAQtE;YAAK,SAChCsE,QAAQtE,SAAShC,MAAMyG;YAAK,YACzBJ,WAAWrE;YAAK,WACjBR,UAAUQ;YAAK,SACjBwE,QAAQxE,UAAU;YAAK,cAClBmC;YAAU,UACdI;UAAM,CAAA,GAAA;YAGb,GAAGrD;YACHhC,SAASwH,WAAA;;AAAA,kBAAC;gBACR1G,OAAO;kBAAEiG,OAAOU;kBAAY,GAAGC;gBAAU;cAC3C,IAACF;AAAA,qBAAAX,YAAAc,UAAA,MAAA,CAAAd,YAAA,SAAAC,WAAA;gBAAA,OAGWhD;gBAAQ,QAAA;gBAAA,YAEHuD,WAAWvE;gBAAK,YAChBqE,WAAWrE;gBAAK,YAChBhC,MAAMX;gBAAQ,QAClBW,MAAMQ;gBAAI,WACPG,OAAK;AACbA,oBAAEqD,gBAAgB;AAElB,sBAAIuC,WAAWvE,MAAOrB,GAAEyD,eAAe;AAEvCZ,0BAAQ;gBACV;gBAAC,YACU7C,OAAK;AACd,sBAAI,CAACA,EAAEmG,OAAQ;AAEf,wBAAMA,SAASnG,EAAEmG;AACjBzF,wBAAMW,QAAQ,CAAC,GAAG8E,OAAOjG,SAAS,CAAA,CAAE;gBACtC;gBAAC,eACayD;gBAAW,WACfd;gBAAO,UACR9B;cAAI,GACRkF,WACArB,UAAU,GAAA,IAAA,GAAAQ,YAAA,OAAA;gBAAA,SAGJY;cAAU,GAAA,CACnB,CAAC,GAACtF,WAAMW,UAANX,mBAAauB,WAAU,CAAC5C,MAAMZ,cAChC8B,MAAM6F,YAAY7F,MAAM6F,UAAU;gBAChCxE,WAAWA,UAAUP;gBACrBD,YAAYA,WAAWC;gBACvBK,oBAAoBA,mBAAmBL;cACzC,CAAC,IACChC,MAAMpB,QAAQ2D,UAAUP,MAAMQ,IAAIwE,UAAIjB,YAAAkB,OAAA;gBAAA,OAE9BD;gBAAI,QAAA;gBAAA,QAEHA;cAAI,GAAA,IAAA,CAEd,IACCzE,UAAUP,MAAMkF,KAAK,IAAI,EAC5B,CAAA,CAAA,CAAA;YAAA;UAGN,CAAA;QAAA;QAIP7B,SAASD,aAAawB,eAAS;;AAAAb,6BAAAc,UAAA,MAAA,EAEzB3F,WAAMmE,YAANnE,+BAAgB0F,YAEhBzB,cAAUY,YAAAc,UAAA,MAAA,CAAAd,YAAA,QAAA,MAAA,IAAA,GAAAA,YAAAoB,UAAA;YAAA,UAKG,CAAC,GAAC9F,WAAMW,UAANX,mBAAauB;YAAM,SACtBF,aAAaV;YAAK,YACfhC,MAAMoH;UAAQ,GACPlG,MAAMpC,OAAO,CAAA,CAAA,CAGpC,CAAA;YAEDgD;MAAS,CAAA;IAIrB,CAAC;AAED,WAAOuF,YAAY,CAAC,GAAGxE,WAAWE,WAAWC,QAAQ;EACvD;AACF,CAAC;",
  "names": ["makeVFileInputProps", "propsFactory", "chips", "Boolean", "counter", "counterSizeString", "type", "String", "default", "counterString", "hideInput", "multiple", "showSize", "Number", "validator", "v", "includes", "makeVInputProps", "prependIcon", "modelValue", "Array", "Object", "props", "val", "wrapInArray", "every", "makeVFieldProps", "clearable", "VFileInput", "genericComponent", "name", "inheritAttrs", "emits", "e", "focused", "files", "setup", "_ref", "attrs", "emit", "slots", "t", "useLocale", "model", "useProxiedModel", "isArray", "isFocused", "focus", "blur", "useFocus", "base", "computed", "undefined", "totalBytes", "value", "reduce", "bytes", "_ref2", "size", "totalBytesReadable", "humanReadableFileSize", "fileNames", "map", "file", "counterValue", "fileCount", "length", "vInputRef", "ref", "vFieldRef", "inputRef", "isActive", "toRef", "active", "isPlainOrUnderlined", "variant", "isDragging", "shallowRef", "onFocus", "document", "activeElement", "onClickPrepend", "click", "onControlMousedown", "onControlClick", "onClear", "stopPropagation", "nextTick", "callEvent", "onDragover", "preventDefault", "stopImmediatePropagation", "onDragleave", "onDrop", "dataTransfer", "DataTransfer", "items", "add", "dispatchEvent", "Event", "bubbles", "watch", "newValue", "hasModelReset", "useRender", "hasCounter", "hasDetails", "details", "rootAttrs", "inputAttrs", "filterInputAttrs", "_", "inputProps", "VInput", "filterProps", "fieldProps", "VField", "_createVNode", "_mergeProps", "class", "style", "_ref3", "id", "isDisabled", "isDirty", "isReadonly", "isValid", "dirty", "_ref4", "fieldClass", "slotProps", "_Fragment", "target", "selection", "text", "VChip", "join", "VCounter", "disabled", "forwardRefs"]
}
